{"version":3,"sources":["webpack:///./src/components/layout.js","webpack:///./src/templates/tags.js"],"names":["Layout","children","data","classes","makeStyles","theme","root","flexGrow","transition","borderRadius","transform","root_R","container","display","flexWrap","paper","padding","spacing","textAlign","color","palette","text","secondary","flex","margin","grid","marginTop","avatar","useStyles","newDate","Date","getDate","getMonth","getFullYear","getHours","getMinutes","createMuiTheme","responsiveFontSizes","css","rhythm","name","content","className","mdDown","item","lg","aria-label","alt","src","file","childImageSharp","fluid","srcWebp","titleTypographyProps","variant","title","site","siteMetadata","pro_title","subheader","pro_subheader","card","maxWidth","card_header","marginBottom","tags","marginLeft","alignItems","justifyContent","fontWeight","backgroundColor","tag_num","height","width","verticalAlign","fontSize","marginRight","Tags","pageContext","tag","allMarkdownRemark","edges","totalCount","tagHeader","xs","direction","justify","gutterBottom","paragraph","component","subheaderTypographyProps","map","node","url_path","frontmatter","to","pageQuery"],"mappings":"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","file":"component---src-templates-tags-js-0440a248d28fed27f9fe.js","sourcesContent":["import React from \"react\"\r\n\r\nimport ButtonAppBar from \"./header\"\r\nimport ProfileCard from \"./profilecard\"\r\n\r\nimport { useStaticQuery,graphql, Link } from \"gatsby\"\r\nimport { css } from \"@emotion/core\"\r\nimport {Helmet} from \"react-helmet\";\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport Hidden from '@material-ui/core/Hidden';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardActions from '@material-ui/core/CardActions';\r\n\r\nimport GitHubIcon from '@material-ui/icons/GitHub';\r\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\r\nimport CodeIcon from '@material-ui/icons/Code';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { createMuiTheme, responsiveFontSizes, ThemeProvider } from '@material-ui/core/styles';\r\n\r\nimport { rhythm } from \"../utils/typography\"\r\n\r\nexport default function Layout({ children }) {\r\n  const data = useStaticQuery(graphql`\r\n    query {\r\n      file(relativePath: {eq: \"my_image.jpg\"}) {\r\n        childImageSharp {\r\n          fluid {\r\n            srcWebp\r\n            tracedSVG\r\n          }\r\n        }\r\n      }\r\n      site {\r\n        siteMetadata {\r\n          pro_title\r\n          pro_subheader\r\n        }\r\n      }\r\n      allMarkdownRemark {\r\n        totalCount\r\n      }\r\n    }\r\n    `\r\n  )\r\n  const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,     \r\n      transition: \"transform .2s\",\r\n      '&:hover': {\r\n        borderRadius: \"2%\",\r\n        transform: \"scale(1.05)\",\r\n      },     \r\n    },\r\n    root_R: {\r\n      flexGrow: 1,\r\n      transition: \"transform .2s\",\r\n      '&:hover': {\r\n        borderRadius: \"2%\",\r\n        transform: \"scale(1.05)\",\r\n      },     \r\n    },\r\n    container: {\r\n      display: 'flex',\r\n      flexWrap: 'wrap',\r\n    },\r\n    paper: {\r\n      padding: theme.spacing(2),\r\n      textAlign: 'center',\r\n      color: theme.palette.text.secondary,\r\n      flex: '1 0 auto',\r\n      margin: theme.spacing(1),\r\n    },\r\n    grid:{\r\n      marginTop: 15,\r\n    },\r\n    avatar:{\r\n      display: 'flex',\r\n      '& > *': {\r\n        margin: theme.spacing(1),\r\n      },\r\n    },\r\n  }));\r\n  const classes = useStyles();\r\n \r\n  let newDate = new Date()\r\n  let date = newDate.getDate();\r\n  let month = newDate.getMonth() + 1;\r\n  let year = newDate.getFullYear();\r\n  let hour = newDate.getHours()\r\n  let minute = newDate.getMinutes()\r\n\r\n  let theme = createMuiTheme();\r\n  theme = responsiveFontSizes(theme);\r\n\r\n  return (\r\n    <div\r\n      css={css`\r\n        margin: 0 auto;\r\n        max-width: 1300px;\r\n        padding-top: ${rhythm(1.5)};\r\n      `}\r\n    >\r\n      <ButtonAppBar/>\r\n\r\n    <Helmet>\r\n      <meta name=\"theme-color\" content=\"#3498DB\"/>\r\n    </Helmet>\r\n      <div className={classes.container}>\r\n      <ThemeProvider theme={theme}>\r\n        <Hidden mdDown>\r\n          <Grid item lg={3} className={classes.grid}>\r\n          <Card className={classes.root}>\r\n            <ProfileCard/>\r\n           </Card>\r\n          </Grid>\r\n        </Hidden>\r\n        \r\n\r\n\r\n        {children}\r\n        \r\n        <Hidden mdDown>\r\n          <Grid item lg={3} className={classes.grid}>\r\n            <Card className={classes.root_R}>\r\n            <CardHeader\r\n              avatar={\r\n                <Avatar aria-label=\"profile\" \r\n                className={classes.avatar} \r\n                alt=\"profile\" \r\n                src={data.file.childImageSharp.fluid.srcWebp} \r\n                />\r\n              }\r\n              titleTypographyProps={{variant:'subtitle1'}}\r\n              title={data.site.siteMetadata.pro_title}\r\n              subheader = {data.site.siteMetadata.pro_subheader}\r\n            />\r\n            </Card>\r\n          </Grid>\r\n        </Hidden>\r\n      </ThemeProvider>\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport Layout from \"../components/layout\"\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\n\r\n// Components\r\nimport { Link, graphql } from \"gatsby\"\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  card: {\r\n    flexGrow: 1,\r\n    margin: 10,\r\n    marginTop: 15,\r\n    maxWidth: 650,\r\n    transform: \"scale(1)\",\r\n    transition: \"transform .2s\",\r\n    borderRadius: \"3%\",\r\n    '&:hover': {\r\n      borderRadius: \"3%\",\r\n      transform: \"scale(1.05)\",\r\n    },        \r\n  },\r\n  card_header:{\r\n    marginBottom:-15,\r\n  },    \r\n  tags:{\r\n    marginLeft:10,\r\n    marginTop:10,\r\n    padding:\".2rem .5rem\",\r\n    display:\"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"right\",\r\n    color:\"#696969\",\r\n    fontWeight: \"300\",\r\n    backgroundColor:\"#D3D3D3\",\r\n    borderRadius:\".8rem\",\r\n    transition: \"background-color .3s\", \r\n    '&:hover': {\r\n      color:\"#696969\",\r\n      backgroundColor:\"#CEE7F7\",\r\n    },\r\n  },\r\n  tag_num:{\r\n    backgroundColor:\"#D9DDDC\",\r\n    borderRadius:\"50%\",\r\n    height: \"1.0rem\",\r\n    width: \"1.0rem\",\r\n    textAlign: \"center\",\r\n    verticalAlign: \"middle\",\r\n    fontSize:\".7rem\",\r\n    marginRight:\"0.3rem\",\r\n  },\r\n  grid:{\r\n    marginTop:10,\r\n  },\r\n}));\r\n\r\nconst Tags = ({ pageContext, data }) => {\r\n  const classes = useStyles();\r\n  const { tag } = pageContext\r\n  const { edges, totalCount } = data.allMarkdownRemark\r\n  const tagHeader = `${totalCount} post${\r\n    totalCount === 1 ? \"\" : \"s\"\r\n  } tagged with \"${tag}\"`\r\n  \r\n  return (\r\n      <Layout>\r\n        <Grid item xs={12} lg={6}>\r\n        <Grid\r\n          container\r\n          direction=\"row\"\r\n          justify=\"center\"\r\n          alignItems=\"flex-start\"\r\n        >\r\n          <Card className={classes.card}>\r\n            <Typography gutterBottom paragraph variant=\"body2\" component=\"p\">\r\n            <CardHeader\r\n              subheaderTypographyProps={{variant:'subtitle2'}}\r\n              subheader = {tagHeader}\r\n              className={classes.card_header}\r\n            />\r\n                <Grid\r\n                  container\r\n                  direction=\"row\"\r\n                  justify=\"flex-start\"\r\n                  alignItems=\"flex-start\"\r\n                  className={classes.grid}\r\n                  \r\n                >\r\n                  {edges.map(({ node }) => {\r\n                    const { url_path } = node.frontmatter\r\n                    const { title } = node.frontmatter\r\n                    return (\r\n                      <Link \r\n                        to={url_path}\r\n                        className={classes.tags}\r\n                      >\r\n                      {title}\r\n                      </Link>\r\n                    )\r\n                  })}\r\n                <Link to=\"/tags\">All tags</Link>\r\n                </Grid>\r\n              </Typography>\r\n          </Card>\r\n          </Grid>\r\n        </Grid>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nTags.propTypes = {\r\n  pageContext: PropTypes.shape({\r\n    tag: PropTypes.string.isRequired,\r\n  }),\r\n  data: PropTypes.shape({\r\n    allMarkdownRemark: PropTypes.shape({\r\n      totalCount: PropTypes.number.isRequired,\r\n      edges: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n          node: PropTypes.shape({\r\n            frontmatter: PropTypes.shape({\r\n              title: PropTypes.string.isRequired,\r\n              url_path: PropTypes.string.isRequired,\r\n            }),\r\n          }),\r\n        }).isRequired\r\n      ),\r\n    }),\r\n  }),\r\n}\r\n\r\nexport default Tags\r\n\r\nexport const pageQuery = graphql`\r\n  query($tag: String) {\r\n    allMarkdownRemark(\r\n      limit: 2000\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n      filter: { frontmatter: { tags: { in: [$tag] }, publish: {eq: true} } }\r\n    ) {\r\n      totalCount\r\n      edges {\r\n        node {\r\n          frontmatter {\r\n            title\r\n            url_path\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`"],"sourceRoot":""}