{"version":3,"sources":["webpack:///./src/templates/tags.js","webpack:///./node_modules/@material-ui/core/esm/CardActionArea/CardActionArea.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","card","margin","marginTop","maxWidth","card_header","marginBottom","cardmedia","borderRadius","objectFit","card_array","color","backgroundColor","all_tags","padding","alignItems","fontWeight","transition","tags","marginRight","display","justifyContent","textbody","flexFlow","text_date","text_readtime","tag_num","height","width","textAlign","verticalAlign","fontSize","grid","thumbnail_img","Tags","pageContext","data","classes","tag","allMarkdownRemark","edges","totalCount","tagHeader","item","xs","lg","container","direction","justify","className","gutterBottom","paragraph","variant","component","subheaderTypographyProps","subheader","to","titleTypographyProps","title","map","node","frontmatter","url_path","date","description","fields","readingTime","text","kebabCase","pageQuery","CardActionArea","props","ref","children","focusVisibleClassName","other","focusVisible","focusHighlight","opacity","palette","action","hoverOpacity","overflow","pointerEvents","position","top","right","bottom","left","transitions","create","duration","name"],"mappings":"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","file":"component---src-templates-tags-js-6daf7f363a852b9d4d0d.js","sourcesContent":["import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport Layout from \"../components/layout\"\r\n// Utilities\r\nimport kebabCase from \"lodash/kebabCase\"\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Img from \"gatsby-image\"\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\n\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\n\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\n\r\n// Components\r\nimport { Link, graphql } from \"gatsby\"\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  card: {\r\n    flexGrow: 1,\r\n    margin: 10,\r\n    marginTop: 15,\r\n    maxWidth: 650, \r\n  },\r\n  card_header:{\r\n    marginBottom:-15,\r\n  },\r\n  cardmedia:{\r\n    borderRadius: \"2%\",\r\n    objectFit: \"cover\",\r\n  },\r\n  card_array:{\r\n    marginTop:10,\r\n    '&:hover': {\r\n      color:\"#696969\",\r\n      backgroundColor:\"#CEE7F7\",\r\n    },\r\n  },\r\n  all_tags:{\r\n    padding:\".2rem .5rem\",\r\n    alignItems: \"center\",\r\n    color:\"white\",\r\n    backgroundColor:\"black\",\r\n    fontWeight: \"300\",\r\n    borderRadius:\".3rem\",\r\n    transition: \"background-color .3s\", \r\n  },   \r\n  tags:{\r\n    marginTop:10,\r\n    marginRight:10,\r\n    padding:\".2rem .5rem\",\r\n    display:\"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"right\",\r\n    color:\"#696969\",\r\n    fontWeight: \"300\",\r\n    backgroundColor:\"#D3D3D3\",\r\n    borderRadius:\".2rem\",\r\n    transition: \"background-color .3s\", \r\n    '&:hover': {\r\n      color:\"#696969\",\r\n      backgroundColor:\"#CEE7F7\",\r\n    },\r\n  },\r\n  textbody:{\r\n    display:\"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"left\",\r\n    flexFlow: \"row wrap\",\r\n  },\r\n  text_date:{\r\n    display:\"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"left\",\r\n    flexFlow: \"row wrap\",\r\n    color:\"#808080\",\r\n  },\r\n  text_readtime:{\r\n    display:\"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"left\",\r\n    flexFlow: \"row wrap\",\r\n    color:\"#808080\",\r\n  },\r\n  tag_num:{\r\n    backgroundColor:\"#D9DDDC\",\r\n    borderRadius:\"50%\",\r\n    height: \"1.0rem\",\r\n    width: \"1.0rem\",\r\n    textAlign: \"center\",\r\n    verticalAlign: \"middle\",\r\n    fontSize:\".7rem\",\r\n    marginRight:\"0.3rem\",\r\n  },\r\n  grid:{\r\n    marginTop:10,\r\n  },\r\n  thumbnail_img:{\r\n    borderRadius: \"3%\",\r\n    alignItems: \"center\",\r\n  },\r\n}));\r\n\r\nconst Tags = ({ pageContext, data }) => {\r\n  const classes = useStyles();\r\n  const { tag } = pageContext\r\n  const { edges, totalCount } = data.allMarkdownRemark\r\n  const tagHeader = `${totalCount} post${\r\n    totalCount === 1 ? \"\" : \"s\"\r\n  } tagged with \"${tag}\"`\r\n  \r\n  return (\r\n      <Layout>\r\n        <Grid item xs={12} lg={6}>\r\n        <Grid\r\n          container\r\n          direction=\"row\"\r\n          justify=\"center\"\r\n          alignItems=\"flex-start\"\r\n        >\r\n          <Card className={classes.card}>\r\n            <Typography gutterBottom paragraph variant=\"body2\" component=\"p\">\r\n            <CardHeader\r\n              subheaderTypographyProps={{variant:'subtitle2'}}\r\n              subheader = {<Link to=\"/tags\" className={classes.all_tags}>All tags</Link>}\r\n              titleTypographyProps={{variant:'subtitle1',gutterBottom:'true' }}\r\n              title={tagHeader}\r\n              className={classes.card_header}\r\n            />\r\n          {edges.map(({ node }) => {\r\n            const { url_path, title, date, description, tags } = node.frontmatter\r\n            return (\r\n              \r\n                <Link \r\n                  to={url_path}\r\n                >\r\n                <CardActionArea className={classes.card_array}>\r\n                  <CardContent >\r\n                    <Typography className={classes.textbody} variant=\"h5\" component=\"h2\">\r\n                      {title}\r\n                    </Typography>\r\n                    <Typography  className={classes.text_date} variant=\"body2\" component=\"p\">\r\n                      {date}\r\n                      <Typography gutterBottom paragraph className={classes.text_readtime} variant=\"body2\" component=\"p\">\r\n                          {\",  \"}{node.fields.readingTime.text}\r\n                      </Typography>\r\n                    </Typography>\r\n                  <Grid\r\n                    container\r\n                    direction=\"row\"\r\n                    justify=\"flex-start\"\r\n                    alignItems=\"flex-start\"\r\n                  >\r\n                    <Typography gutterBottom paragraph className={classes.textbody} variant=\"body2\" component=\"p\">\r\n                      {node.frontmatter.tags.map((tag) => (\r\n                        <Grid item >\r\n                          <Link \r\n                            to={`/tags/${kebabCase(tag)}/`}\r\n                            className={classes.tags} \r\n                          >\r\n                              {tag}{\" \"}\r\n                          </Link>\r\n                        </Grid>\r\n                      ))}\r\n                    </Typography>\r\n                  </Grid>\r\n                </CardContent>\r\n              </CardActionArea>\r\n  \r\n\r\n\r\n                </Link>\r\n             \r\n            )\r\n          })}\r\n              </Typography>\r\n          </Card>\r\n          </Grid>\r\n        </Grid>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nTags.propTypes = {\r\n  pageContext: PropTypes.shape({\r\n    tag: PropTypes.string.isRequired,\r\n  }),\r\n  data: PropTypes.shape({\r\n    allMarkdownRemark: PropTypes.shape({\r\n      totalCount: PropTypes.number.isRequired,\r\n      edges: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n          node: PropTypes.shape({\r\n            frontmatter: PropTypes.shape({\r\n              title: PropTypes.string.isRequired,\r\n              url_path: PropTypes.string.isRequired,\r\n              description: PropTypes.string.isRequired,\r\n              tags: PropTypes.arrayOf(PropTypes.string),\r\n            }),\r\n            fields: PropTypes.shape({\r\n              readingTime : PropTypes.shape({\r\n                text : PropTypes.string.isRequired,\r\n              }),\r\n            }),\r\n          }),\r\n        }).isRequired\r\n      ),\r\n    }),\r\n  }),\r\n}\r\n\r\nexport default Tags\r\n\r\nexport const pageQuery = graphql`\r\n  query($tag: String) {\r\n    allMarkdownRemark(\r\n      limit: 2000\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n      filter: { frontmatter: { tags: { in: [$tag] }, publish: {eq: true} } }\r\n    ) {\r\n      totalCount\r\n      edges {\r\n        node {\r\n          frontmatter {\r\n            title\r\n            url_path\r\n            description\r\n            tags\r\n            date\r\n          }\r\n          fields {\r\n            readingTime {\r\n              text\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport ButtonBase from '../ButtonBase';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      display: 'block',\n      textAlign: 'inherit',\n      width: '100%',\n      '&:hover $focusHighlight': {\n        opacity: theme.palette.action.hoverOpacity\n      },\n      '&$focusVisible $focusHighlight': {\n        opacity: 0.12\n      }\n    },\n\n    /* Pseudo-class applied to the ButtonBase root element if the action area is keyboard focused. */\n    focusVisible: {},\n\n    /* Styles applied to the overlay that covers the action area when it is keyboard focused. */\n    focusHighlight: {\n      overflow: 'hidden',\n      pointerEvents: 'none',\n      position: 'absolute',\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0,\n      borderRadius: 'inherit',\n      opacity: 0,\n      backgroundColor: 'currentcolor',\n      transition: theme.transitions.create('opacity', {\n        duration: theme.transitions.duration[\"short\"]\n      })\n    }\n  };\n};\nvar CardActionArea = React.forwardRef(function CardActionArea(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      focusVisibleClassName = props.focusVisibleClassName,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"focusVisibleClassName\"]);\n\n  return /*#__PURE__*/React.createElement(ButtonBase, _extends({\n    className: clsx(classes.root, className),\n    focusVisibleClassName: clsx(focusVisibleClassName, classes.focusVisible),\n    ref: ref\n  }, other), children, /*#__PURE__*/React.createElement(\"span\", {\n    className: classes.focusHighlight\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? void 0 : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCardActionArea'\n})(CardActionArea);"],"sourceRoot":""}