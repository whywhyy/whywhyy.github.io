{"version":3,"sources":["webpack:///./src/pages/projects.js","webpack:///./src/components/layout.js","webpack:///./node_modules/@material-ui/core/esm/styles/cssUtils.js","webpack:///./node_modules/@material-ui/core/esm/styles/responsiveFontSizes.js"],"names":["Projects","classes","makeStyles","theme","root","flexGrow","container","display","flexWrap","paper","padding","spacing","textAlign","color","palette","text","secondary","flex","margin","marginTop","useStyles","title","item","lg","className","role","aria-label","Layout","children","transition","marginRight","borderRadius","transform","root_R","marginLeft","grid","avatar","createMuiTheme","responsiveFontSizes","css","rhythm","mdDown","isUnitless","value","String","parseFloat","length","toUnitless","convertLength","baseFontSize","toUnit","fromUnit","match","pxLength","outputLength","toFixed","alignProperty","_ref","size","sizeBelow","sizeAbove","fontGrid","_ref2","lineHeight","pixels","htmlFontSize","responsiveProperty","_ref3","cssProperty","min","max","_ref3$unit","unit","_ref3$breakpoints","breakpoints","_ref3$transform","output","concat","factor","forEach","breakpoint","Math","round","themeInput","options","arguments","undefined","_options$breakpoints","_options$disableAlign","disableAlign","_options$factor","_options$variants","variants","typography","convert","breakpointValues","map","x","values","variant","style","remFontSize","fontSize","maxFontSize","minFontSize","Error","join"],"mappings":"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","file":"component---src-pages-projects-js-52ea1b65b834f6a93f05.js","sourcesContent":["import React from \"react\"\r\nimport Layout from \"../components/layout\"\r\nimport SEO from \"../components/seo\"\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nexport default function Projects() {\r\n  \r\n  const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    container: {\r\n      display: 'flex',\r\n      flexWrap: 'wrap',\r\n    },\r\n    paper: {\r\n      padding: theme.spacing(2),\r\n      textAlign: 'center',\r\n      color: theme.palette.text.secondary,\r\n      flex: '1 0 auto',\r\n      margin: theme.spacing(1),\r\n      marginTop: -25,\r\n    },\r\n  }));\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Layout>\r\n      <SEO title={`Projects`}/>\r\n      <Grid item lg={6}>\r\n            <Paper className={classes.paper}>\r\n              <h1>\r\n              <span role=\"img\" aria-label=\"Folded Hands\">ðŸ‘·</span>\r\n              ê³µì‚¬ì¤‘ìž…ë‹ˆë‹¤!..\r\n              </h1>\r\n            <p>\r\n      </p>\r\n            </Paper>\r\n      </Grid>\r\n\r\n\r\n    </Layout>\r\n  )\r\n}","import React from \"react\"\r\n\r\nimport ButtonAppBar from \"./header\"\r\nimport ProfileCard from \"./profilecard\"\r\nimport Footer from \"./footer\"\r\n\r\nimport { useStaticQuery,graphql} from \"gatsby\"\r\nimport { css } from \"@emotion/core\"\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport Hidden from '@material-ui/core/Hidden';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport Card from '@material-ui/core/Card';\r\n\r\n\r\n\r\nimport { createMuiTheme, responsiveFontSizes, ThemeProvider } from '@material-ui/core/styles';\r\n\r\nimport { rhythm } from \"../utils/typography\"\r\n\r\nexport default function Layout({ children }) {\r\n  const data = useStaticQuery(graphql`\r\n    query {\r\n      file(relativePath: {eq: \"my_image.jpg\"}) {\r\n        childImageSharp {\r\n          fluid {\r\n            srcWebp\r\n            tracedSVG\r\n          }\r\n        }\r\n      }\r\n      site {\r\n        siteMetadata {\r\n          pro_title\r\n          pro_subheader\r\n        }\r\n      }\r\n      allMdx {\r\n        totalCount\r\n      }\r\n    }\r\n    `\r\n  )\r\n  const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,     \r\n      transition: \"transform .2s\",\r\n      marginRight:10,\r\n      '&:hover': {\r\n        borderRadius: \"2%\",\r\n        transform: \"scale(1.05)\",\r\n      },\r\n    },\r\n    root_R: {\r\n      flexGrow: 1,\r\n      transition: \"transform .2s\",\r\n      marginLeft:10,\r\n      '&:hover': {\r\n        borderRadius: \"2%\",\r\n        transform: \"scale(1.05)\",\r\n      },     \r\n    },\r\n    container: {\r\n      display: 'flex',\r\n      flexWrap: 'wrap',\r\n    },\r\n    paper: {\r\n      padding: theme.spacing(2),\r\n      textAlign: 'center',\r\n      color: theme.palette.text.secondary,\r\n      flex: '1 0 auto',\r\n      margin: theme.spacing(1),\r\n    },\r\n    grid:{\r\n      marginTop: -25,\r\n    },\r\n    avatar:{\r\n      display: 'flex',\r\n      '& > *': {\r\n        margin: theme.spacing(1),\r\n      },\r\n    },\r\n  }));\r\n  const classes = useStyles();\r\n\r\n\r\n  let theme = createMuiTheme();\r\n  theme = responsiveFontSizes(theme);\r\n\r\n  return (\r\n    <div>\r\n    <div\r\n      css={css`\r\n        margin: 0 auto;\r\n        max-width: 1300px;\r\n        min-height: 100vh;\r\n        padding-top: ${rhythm(1.5)};\r\n      `}\r\n    >\r\n      <ButtonAppBar/>\r\n\r\n\r\n      <div className={classes.container}>\r\n      <ThemeProvider theme={theme}>\r\n        <Hidden mdDown>\r\n          <Grid item lg={3} className={classes.grid}>\r\n          <Card className={classes.root}>\r\n            <ProfileCard/>\r\n           </Card>\r\n          </Grid>\r\n        </Hidden>\r\n        \r\n\r\n\r\n        {children}\r\n        \r\n        <Hidden mdDown>\r\n          <Grid item lg={3} className={classes.grid}>\r\n            <Card className={classes.root_R}>\r\n\r\n            </Card>\r\n          </Grid>\r\n        </Hidden>\r\n      </ThemeProvider>\r\n      </div>\r\n      \r\n    </div>\r\n    <Footer/>\r\n    </div>\r\n  )\r\n}\r\n","import \"core-js/modules/es6.array.for-each\";\nimport \"core-js/modules/es6.regexp.match\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nexport function isUnitless(value) {\n  return String(parseFloat(value)).length === String(value).length;\n} // Ported from Compass\n// https://github.com/Compass/compass/blob/master/core/stylesheets/compass/typography/_units.scss\n// Emulate the sass function \"unit\"\n\nexport function getUnit(input) {\n  return String(input).match(/[\\d.\\-+]*\\s*(.*)/)[1] || '';\n} // Emulate the sass function \"unitless\"\n\nexport function toUnitless(length) {\n  return parseFloat(length);\n} // Convert any CSS <length> or <percentage> value to any another.\n// From https://github.com/KyleAMathews/convert-css-length\n\nexport function convertLength(baseFontSize) {\n  return function (length, toUnit) {\n    var fromUnit = getUnit(length); // Optimize for cases where `from` and `to` units are accidentally the same.\n\n    if (fromUnit === toUnit) {\n      return length;\n    } // Convert input length to pixels.\n\n\n    var pxLength = toUnitless(length);\n\n    if (fromUnit !== 'px') {\n      if (fromUnit === 'em') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n      } else if (fromUnit === 'rem') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n        return length;\n      }\n    } // Convert length in pixels to the output unit\n\n\n    var outputLength = pxLength;\n\n    if (toUnit !== 'px') {\n      if (toUnit === 'em') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else if (toUnit === 'rem') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else {\n        return length;\n      }\n    }\n\n    return parseFloat(outputLength.toFixed(5)) + toUnit;\n  };\n}\nexport function alignProperty(_ref) {\n  var size = _ref.size,\n      grid = _ref.grid;\n  var sizeBelow = size - size % grid;\n  var sizeAbove = sizeBelow + grid;\n  return size - sizeBelow < sizeAbove - size ? sizeBelow : sizeAbove;\n} // fontGrid finds a minimal grid (in rem) for the fontSize values so that the\n// lineHeight falls under a x pixels grid, 4px in the case of Material Design,\n// without changing the relative line height\n\nexport function fontGrid(_ref2) {\n  var lineHeight = _ref2.lineHeight,\n      pixels = _ref2.pixels,\n      htmlFontSize = _ref2.htmlFontSize;\n  return pixels / (lineHeight * htmlFontSize);\n}\n/**\n * generate a responsive version of a given CSS property\n * @example\n * responsiveProperty({\n *   cssProperty: 'fontSize',\n *   min: 15,\n *   max: 20,\n *   unit: 'px',\n *   breakpoints: [300, 600],\n * })\n *\n * // this returns\n *\n * {\n *   fontSize: '15px',\n *   '@media (min-width:300px)': {\n *     fontSize: '17.5px',\n *   },\n *   '@media (min-width:600px)': {\n *     fontSize: '20px',\n *   },\n * }\n *\n * @param {Object} params\n * @param {string} params.cssProperty - The CSS property to be made responsive\n * @param {number} params.min - The smallest value of the CSS property\n * @param {number} params.max - The largest value of the CSS property\n * @param {string} [params.unit] - The unit to be used for the CSS property\n * @param {Array.number} [params.breakpoints]  - An array of breakpoints\n * @param {number} [params.alignStep] - Round scaled value to fall under this grid\n * @returns {Object} responsive styles for {params.cssProperty}\n */\n\nexport function responsiveProperty(_ref3) {\n  var cssProperty = _ref3.cssProperty,\n      min = _ref3.min,\n      max = _ref3.max,\n      _ref3$unit = _ref3.unit,\n      unit = _ref3$unit === void 0 ? 'rem' : _ref3$unit,\n      _ref3$breakpoints = _ref3.breakpoints,\n      breakpoints = _ref3$breakpoints === void 0 ? [600, 960, 1280] : _ref3$breakpoints,\n      _ref3$transform = _ref3.transform,\n      transform = _ref3$transform === void 0 ? null : _ref3$transform;\n\n  var output = _defineProperty({}, cssProperty, \"\".concat(min).concat(unit));\n\n  var factor = (max - min) / breakpoints[breakpoints.length - 1];\n  breakpoints.forEach(function (breakpoint) {\n    var value = min + factor * breakpoint;\n\n    if (transform !== null) {\n      value = transform(value);\n    }\n\n    output[\"@media (min-width:\".concat(breakpoint, \"px)\")] = _defineProperty({}, cssProperty, \"\".concat(Math.round(value * 10000) / 10000).concat(unit));\n  });\n  return output;\n}","import \"core-js/modules/es6.array.for-each\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.object.to-string\";\nimport \"core-js/modules/es6.array.map\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { isUnitless, convertLength, responsiveProperty, alignProperty, fontGrid } from './cssUtils';\nexport default function responsiveFontSizes(themeInput) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options$breakpoints = options.breakpoints,\n      breakpoints = _options$breakpoints === void 0 ? ['sm', 'md', 'lg'] : _options$breakpoints,\n      _options$disableAlign = options.disableAlign,\n      disableAlign = _options$disableAlign === void 0 ? false : _options$disableAlign,\n      _options$factor = options.factor,\n      factor = _options$factor === void 0 ? 2 : _options$factor,\n      _options$variants = options.variants,\n      variants = _options$variants === void 0 ? ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'caption', 'button', 'overline'] : _options$variants;\n\n  var theme = _extends({}, themeInput);\n\n  theme.typography = _extends({}, theme.typography);\n  var typography = theme.typography; // Convert between css lengths e.g. em->px or px->rem\n  // Set the baseFontSize for your project. Defaults to 16px (also the browser default).\n\n  var convert = convertLength(typography.htmlFontSize);\n  var breakpointValues = breakpoints.map(function (x) {\n    return theme.breakpoints.values[x];\n  });\n  variants.forEach(function (variant) {\n    var style = typography[variant];\n    var remFontSize = parseFloat(convert(style.fontSize, 'rem'));\n\n    if (remFontSize <= 1) {\n      return;\n    }\n\n    var maxFontSize = remFontSize;\n    var minFontSize = 1 + (maxFontSize - 1) / factor;\n    var lineHeight = style.lineHeight;\n\n    if (!isUnitless(lineHeight) && !disableAlign) {\n      throw new Error(['Material-UI: Unsupported non-unitless line height with grid alignment.', 'Use unitless line heights instead.'].join('\\n'));\n    }\n\n    if (!isUnitless(lineHeight)) {\n      // make it unitless\n      lineHeight = parseFloat(convert(lineHeight, 'rem')) / parseFloat(remFontSize);\n    }\n\n    var transform = null;\n\n    if (!disableAlign) {\n      transform = function transform(value) {\n        return alignProperty({\n          size: value,\n          grid: fontGrid({\n            pixels: 4,\n            lineHeight: lineHeight,\n            htmlFontSize: typography.htmlFontSize\n          })\n        });\n      };\n    }\n\n    typography[variant] = _extends(_extends({}, style), responsiveProperty({\n      cssProperty: 'fontSize',\n      min: minFontSize,\n      max: maxFontSize,\n      unit: 'rem',\n      breakpoints: breakpointValues,\n      transform: transform\n    }));\n  });\n  return theme;\n}"],"sourceRoot":""}