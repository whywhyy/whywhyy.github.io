{"version":3,"sources":["webpack:///./node_modules/core-js/modules/_array-fill.js","webpack:///./src/pages/projects/tictactoe/index.js","webpack:///./node_modules/core-js/modules/es6.array.fill.js","webpack:///./src/pages/projects/tictactoe/game.js"],"names":["toObject","toAbsoluteIndex","toLength","module","exports","value","O","this","length","aLen","arguments","index","undefined","end","endPos","Game","$export","P","fill","Square","props","className","line","onClick","Board","renderSquare","i","squares","indexOf","render","items","row","j","push","key","React","Component","state","history","Array","clicked","stepNumber","xIsNext","active","ascending","handleClick","slice","calculateWinner","winner","setState","concat","Math","floor","jumpTo","step","toggleAsc","status","current","cal","fontWeight","inactive","moves","map","move","desc","style","sort","a","b","isDraw","lines","c"],"mappings":"+FAEA,IAAIA,EAAW,EAAQ,QACnBC,EAAkB,EAAQ,QAC1BC,EAAW,EAAQ,QACvBC,EAAOC,QAAU,SAAcC,GAO7B,IANA,IAAIC,EAAIN,EAASO,MACbC,EAASN,EAASI,EAAEE,QACpBC,EAAOC,UAAUF,OACjBG,EAAQV,EAAgBQ,EAAO,EAAIC,UAAU,QAAKE,EAAWJ,GAC7DK,EAAMJ,EAAO,EAAIC,UAAU,QAAKE,EAChCE,OAAiBF,IAARC,EAAoBL,EAASP,EAAgBY,EAAKL,GACxDM,EAASH,GAAOL,EAAEK,KAAWN,EACpC,OAAOC,I,kCCbT,uBACeS,YAAf,S,qBCAA,IAAIC,EAAU,EAAQ,QAEtBA,EAAQA,EAAQC,EAAG,QAAS,CAAEC,KAAM,EAAQ,UAE5C,EAAQ,OAAR,CAAiC,S,4QCFjC,SAASC,EAAOC,GACZ,OACI,sBACEC,UAAWD,EAAME,KAAO,YAAc,SACtCC,QAASH,EAAMG,SAEZH,EAAMf,O,IAIXmB,E,gGAEJC,aAAA,SAAaC,GAAI,IAAD,OACd,OACA,YAACP,EAAD,CACEd,MAAOE,KAAKa,MAAMO,QAAQD,GAC1BH,QAAS,kBAAM,EAAKH,MAAMG,QAAQG,IAClCJ,MAAsC,IAAhCf,KAAKa,MAAME,KAAKM,QAAQF,IAAY,Q,EAK9CG,OAAA,WAEI,IADA,IAAIC,EAAQ,GACHJ,EAAI,EAAGA,EAAE,EAAGA,IAAI,CAErB,IADA,IAAIK,EAAM,GACDC,EAAE,EAAGA,EAAE,EAAEA,IACdD,EAAIE,KACJ,oBAAMC,IAAQ,EAAFR,EAAKM,GACZzB,KAAKkB,aAAgB,EAAFC,EAAKM,KAGjCF,EAAMG,KAAK,mBAAKZ,UAAU,YAAYa,IAAKR,GAAIK,IAErD,OACE,uBACKD,I,GA1BSK,IAAMC,WAgCLrB,E,YACnB,WAAYK,GAAQ,IAAD,SACf,cAAMA,IAAN,MACKiB,MAAQ,CACXC,QAAS,CAAC,CACRX,QAASY,MAAM,GAAGrB,KAAK,MACvBsB,QAAQ,CAAC,EAAE,KAEbC,WAAY,EACZC,SAAS,EACTC,QAAU,EACVC,WAAY,GAVC,E,kCAajBC,YAAA,SAAYnB,GACV,IAAMY,EAAU/B,KAAK8B,MAAMC,QAAQQ,MAAM,EAAGvC,KAAK8B,MAAMI,WAAa,GAE9Dd,EADUW,EAAQA,EAAQ9B,OAAS,GACjBmB,QAAQmB,QAC5BC,EAAgBpB,GAASqB,QAAUrB,EAAQD,KAG/CC,EAAQD,GAAKnB,KAAK8B,MAAMK,QAAU,IAAM,IACxCnC,KAAK0C,SAAS,CACZX,QAASA,EAAQY,OAAO,CAAC,CACvBvB,QAASA,EACTa,QAAQ,CAACW,KAAKC,MAAM1B,EAAI,GAAIyB,KAAKC,MAAM1B,EAAI,OAE7Ce,WAAYH,EAAQ9B,OACpBkC,SAAUnC,KAAK8B,MAAMK,Y,EAGzBW,OAAA,SAAOC,GACL/C,KAAK0C,SAAS,CACZR,WAAYa,EACZZ,QAAUY,EAAO,GAAO,EACxBX,OAAQW,K,EAGZC,UAAA,WACIhD,KAAK0C,SAAS,CACZL,WAAYrC,KAAK8B,MAAMO,a,EAG/Bf,OAAA,WAAU,IAgCF2B,EAhCC,OACClB,EAAU/B,KAAK8B,MAAMC,QACrBmB,EAAUnB,EAAQ/B,KAAK8B,MAAMI,YAC7BiB,EAAMX,EAAgBU,EAAQ9B,SAE9BgB,EAAS,CAACgB,WAAW,KACrBC,EAAW,CAACD,WAAW,KAEvBE,EAAQvB,EAAQwB,KAAI,SAACR,EAAMS,GAC7B,IAAMC,EAAOD,EACX,eAAiBA,EAAO,OAAUT,EAAKd,QAAQ,GAAK,OAASc,EAAKd,QAAQ,GAC1E,mBACF,OACE,kBAAIN,IAAK6B,GACP,sBACAE,MAAOF,IAAS,EAAK1B,MAAMM,OAASA,EAASiB,EAC7CvC,UAAW,UACXE,QAAS,kBAAM,EAAK8B,OAAOU,KACtBC,OAyBf,OAnBOzD,KAAK8B,MAAMO,WACZiB,EAAMK,MAAK,SAACC,EAAEC,GACV,OAAOA,EAAElC,IAAMiC,EAAEjC,OAQzBsB,EADIE,EAAIV,OACC,WAAaU,EAAIV,OAElBU,EAAIW,OACC,QAGJ,iBAAmB9D,KAAK8B,MAAMK,QAAU,IAAM,KAIvD,mBAAKrB,UAAU,QACb,mBAAKA,UAAU,cACb,YAACG,EAAD,CACIG,QAAS8B,EAAQ9B,QACjBJ,QAAS,SAACG,GAAD,OAAO,EAAKmB,YAAYnB,IACjCJ,KAAQoC,EAAIpC,QAGlB,mBAAKD,UAAU,aACb,uBAAMmC,GACN,sBAAKK,GACL,sBAAQtC,QAAS,kBAAM,EAAKgC,cAA5B,mB,GAlGwBpB,IAAMC,WA6GxC,SAASW,EAAgBpB,GAWvB,IAVA,IAAM2C,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEA5C,EAAI,EAAGA,EAAI4C,EAAM9D,OAAQkB,IAAK,CAAC,IAAD,EACnB4C,EAAM5C,GAAjByC,EAD8B,KAC3BC,EAD2B,KACxBG,EADwB,KAErC,GAAI5C,EAAQwC,IAAMxC,EAAQwC,KAAOxC,EAAQyC,IAAMzC,EAAQwC,KAAOxC,EAAQ4C,GACpE,MAAO,CACHvB,OAASrB,EAAQwC,GACjB7C,KAAOgD,EAAM5C,GACb2C,QAAS,GAIjB,IAAK,IAAI3C,EAAI,EAAGA,EAAIC,EAAQnB,OAAQkB,IAChC,GAAmB,OAAfC,EAAQD,GACR,MAAO,CACHsB,OAAS,KACT1B,KAAO,GACP+C,QAAS,GAIrB,MAAO,CACHrB,OAAS,KACT1B,KAAO,GACP+C,QAAS","file":"component---src-pages-projects-tictactoe-index-js-412ba1ad5f2d9cfdc904.js","sourcesContent":["// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)\n'use strict';\nvar toObject = require('./_to-object');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nvar toLength = require('./_to-length');\nmodule.exports = function fill(value /* , start = 0, end = @length */) {\n  var O = toObject(this);\n  var length = toLength(O.length);\n  var aLen = arguments.length;\n  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);\n  var end = aLen > 2 ? arguments[2] : undefined;\n  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);\n  while (endPos > index) O[index++] = value;\n  return O;\n};\n","import Game from \"./game\"\r\nexport default Game ;\r\n","// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)\nvar $export = require('./_export');\n\n$export($export.P, 'Array', { fill: require('./_array-fill') });\n\nrequire('./_add-to-unscopables')('fill');\n","import React from 'react';\r\nimport './index.css';\r\n\r\nfunction Square(props){\r\n    return (\r\n        <button \r\n          className={props.line ? \"winsquare\" : \"square\"} \r\n          onClick={props.onClick}\r\n        >\r\n            {props.value}\r\n        </button>\r\n    )\r\n}\r\n  class Board extends React.Component {\r\n    // 5. 승자가 정해지면 승부의 원인이 된 세 개의 사각형을 강조해주세요.\r\n    renderSquare(i) {\r\n      return (\r\n      <Square \r\n        value={this.props.squares[i]} \r\n        onClick={() => this.props.onClick(i)}\r\n        line={this.props.line.indexOf(i) === -1 ? null  :  true}\r\n      />\r\n      );\r\n    }\r\n    // 3.사각형들을 만들 때 하드코딩 대신에 두 개의 반복문을 사용하도록 Board를 다시 작성해주세요.\r\n    render() {\r\n        let items = [];\r\n        for (let i = 0; i<3 ;i++){\r\n            let row = [];\r\n            for (let j=0; j<3;j++){\r\n                row.push(\r\n                <span key={(i*3)+j}>\r\n                    {this.renderSquare((i*3)+j)}\r\n                </span>);\r\n            }\r\n            items.push(<div className=\"board-row\" key={i}>{row}</div>)\r\n        }\r\n      return (\r\n        <div>\r\n            {items}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  export default class Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          history: [{\r\n            squares: Array(9).fill(null),\r\n            clicked:[0,0],\r\n          }],\r\n          stepNumber: 0,\r\n          xIsNext: true,\r\n          active : -1,\r\n          ascending : true,\r\n        };\r\n      }\r\n      handleClick(i) {\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n        if (calculateWinner(squares).winner || squares[i]) {\r\n          return;\r\n        }\r\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n        this.setState({\r\n          history: history.concat([{\r\n            squares: squares,\r\n            clicked:[Math.floor(i % 3), Math.floor(i / 3)],\r\n          }]),\r\n          stepNumber: history.length,\r\n          xIsNext: !this.state.xIsNext,\r\n        });\r\n      }\r\n      jumpTo(step) {\r\n        this.setState({\r\n          stepNumber: step,\r\n          xIsNext: (step % 2) === 0,\r\n          active: step,\r\n        });\r\n      }\r\n      toggleAsc(){\r\n          this.setState({\r\n            ascending: !this.state.ascending\r\n          });\r\n      }\r\n    render() {\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const cal = calculateWinner(current.squares);\r\n        // 2.이동 목록에서 현재 선택된 아이템을 굵게 표시해주세요.\r\n        const active = {fontWeight:900}\r\n        const inactive = {fontWeight:100}\r\n        // 1.이동 기록 목록에서 특정 형식(행, 열)으로 각 이동의 위치를 표시해주세요.\r\n        const moves = history.map((step, move) => {\r\n            const desc = move ?\r\n              'Go to move #' + move + \" x :\"  + step.clicked[0]+  \" y :\" + step.clicked[1]:\r\n              'Go to game start';\r\n            return (\r\n              <li key={move}>\r\n                <button \r\n                style={move === this.state.active ? active : inactive}\r\n                className =\"curlist\" \r\n                onClick={() => this.jumpTo(move)}>\r\n                    {desc}\r\n                </button>\r\n              </li>\r\n            );\r\n          });\r\n        // 4. 오름차순이나 내림차순으로 이동을 정렬하도록 토글 버튼을 추가해주세요.\r\n        if (!this.state.ascending){\r\n            moves.sort((a,b)=> {\r\n                return b.key - a.key ; \r\n            })\r\n            // OR  moves.reverse();\r\n        }\r\n\r\n        // 6. 승자가 없는 경우 무승부라는 메시지를 표시해주세요.\r\n        let status;\r\n        if (cal.winner) {\r\n        status = 'Winner: ' + cal.winner;\r\n        }\r\n        else if(cal.isDraw){\r\n            status = 'Draw '\r\n        } \r\n        else {\r\n        status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n        }\r\n\r\n      return (\r\n        <div className=\"game\">\r\n          <div className=\"game-board\">\r\n            <Board \r\n                squares={current.squares}\r\n                onClick={(i) => this.handleClick(i)}\r\n                line = {cal.line}\r\n            />\r\n          </div>\r\n          <div className=\"game-info\">\r\n            <div>{status}</div>\r\n            <ol>{moves}</ol>\r\n            <button onClick={() => this.toggleAsc()}>Change order</button>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  // ========================================\r\n  \r\n\r\n\r\n  function calculateWinner(squares) {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n        return {\r\n            winner : squares[a],\r\n            line : lines[i],\r\n            isDraw : false,\r\n        }\r\n      }\r\n    }\r\n    for (let i = 0; i < squares.length; i++){\r\n        if (squares[i] === null){\r\n            return {\r\n                winner : null,\r\n                line : [],\r\n                isDraw : false,\r\n            }\r\n        }\r\n    }\r\n    return {\r\n        winner : null,\r\n        line : [],\r\n        isDraw : true,\r\n    }\r\n  }"],"sourceRoot":""}