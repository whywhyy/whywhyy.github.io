{"version":3,"sources":["webpack:///./src/pages/tags.js"],"names":["TagsPage","data","group","allMarkdownRemark","classes","site","siteMetadata","title","makeStyles","theme","root","flexGrow","card","margin","marginTop","maxWidth","transform","transition","borderRadius","card_header","marginBottom","tags","marginLeft","padding","display","alignItems","justifyContent","color","fontWeight","backgroundColor","tag_num","height","width","textAlign","verticalAlign","fontSize","marginRight","grid","useStyles","item","xs","lg","container","direction","justify","className","gutterBottom","paragraph","variant","component","subheaderTypographyProps","subheader","map","tag","to","kebabCase","fieldValue","totalCount","pageQuery"],"mappings":"4FAAA,wOAoBe,SAASA,EAAT,GAOZ,IAAD,IANAC,KACuBC,EAKvB,EALEC,kBAAqBD,MAyDjBE,GApDN,EAJEC,KACEC,aAAgBC,MAIFC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,GAEZC,KAAM,CACJD,SAAU,EACVE,OAAQ,GACRC,UAAW,GACXC,SAAU,IACVC,UAAW,WACXC,WAAY,gBACZC,aAAc,KACd,UAAW,CACTA,aAAc,KACdF,UAAW,gBAGfG,YAAY,CACVC,cAAc,IAEhBC,KAAK,CACHC,WAAW,GACXR,UAAU,GACVS,QAAQ,cACRC,QAAQ,OACRC,WAAY,SACZC,eAAgB,QAChBC,MAAM,UACNC,WAAY,MACZC,gBAAgB,UAChBX,aAAa,QACbD,WAAY,uBACZ,UAAW,CACTU,MAAM,UACNE,gBAAgB,YAGpBC,QAAQ,CACND,gBAAgB,UAChBX,aAAa,MACba,OAAQ,SACRC,MAAO,SACPC,UAAW,SACXC,cAAe,SACfC,SAAS,QACTC,YAAY,UAEdC,KAAK,CACHvB,UAAU,OAGEwB,IAGd,OACE,YAAC,IAAD,KACE,YAAC,IAAD,CACE/B,MAAK,SAEP,YAAC,IAAD,CAAMgC,MAAI,EAACC,GAAI,GAAIC,GAAI,GACvB,YAAC,IAAD,CACEC,WAAS,EACTC,UAAU,MACVC,QAAQ,SACRnB,WAAW,cAEX,YAAC,IAAD,CAAMoB,UAAWzC,EAAQQ,MACvB,YAAC,IAAD,CAAYkC,cAAY,EAACC,WAAS,EAACC,QAAQ,QAAQC,UAAU,KAC7D,YAAC,IAAD,CACEC,yBAA0B,CAACF,QAAQ,aACnCG,UAAS,OACTN,UAAWzC,EAAQe,cAEnB,YAAC,IAAD,CACEuB,WAAS,EACTC,UAAU,MACVC,QAAQ,aACRnB,WAAW,aACXoB,UAAWzC,EAAQiC,MAElBnC,EAAMkD,KAAI,SAAAC,GAAG,OACV,YAAC,IAAD,CACEC,GAAE,SAAWC,IAAUF,EAAIG,YAAzB,IACFX,UAAWzC,EAAQiB,MAErB,oBAAMwB,UAAWzC,EAAQ0B,SAAzB,IAAoCuB,EAAII,YACvCJ,EAAIG,qBA+BlB,IAAME,EAAS","file":"component---src-pages-tags-js-c894b82b5e534c91c386.js","sourcesContent":["import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport Layout from \"../components/layout\"\r\nimport SEO from \"../components/seo\"\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\n\r\n// Utilities\r\nimport kebabCase from \"lodash/kebabCase\"\r\n\r\n// Components\r\n\r\nimport { Link, graphql } from \"gatsby\"\r\n\r\nexport default function TagsPage ({\r\n  data: {\r\n    allMarkdownRemark: { group },\r\n    site: {\r\n      siteMetadata: { title },\r\n    }\r\n  }\r\n}){\r\n  const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    card: {\r\n      flexGrow: 1,\r\n      margin: 10,\r\n      marginTop: 15,\r\n      maxWidth: 650,\r\n      transform: \"scale(1)\",\r\n      transition: \"transform .2s\",\r\n      borderRadius: \"3%\",\r\n      '&:hover': {\r\n        borderRadius: \"3%\",\r\n        transform: \"scale(1.05)\",\r\n      },        \r\n    },\r\n    card_header:{\r\n      marginBottom:-15,\r\n    },    \r\n    tags:{\r\n      marginLeft:10,\r\n      marginTop:10,\r\n      padding:\".2rem .5rem\",\r\n      display:\"flex\",\r\n      alignItems: \"center\",\r\n      justifyContent: \"right\",\r\n      color:\"#696969\",\r\n      fontWeight: \"300\",\r\n      backgroundColor:\"#D3D3D3\",\r\n      borderRadius:\".8rem\",\r\n      transition: \"background-color .3s\", \r\n      '&:hover': {\r\n        color:\"#696969\",\r\n        backgroundColor:\"#CEE7F7\",\r\n      },\r\n    },\r\n    tag_num:{\r\n      backgroundColor:\"#D9DDDC\",\r\n      borderRadius:\"50%\",\r\n      height: \"1.0rem\",\r\n      width: \"1.0rem\",\r\n      textAlign: \"center\",\r\n      verticalAlign: \"middle\",\r\n      fontSize:\".7rem\",\r\n      marginRight:\"0.3rem\",\r\n    },\r\n    grid:{\r\n      marginTop:10,\r\n    },\r\n  }));\r\n  const classes = useStyles();\r\n\r\n\r\n    return (    \r\n      <Layout>\r\n        <SEO \r\n          title={`Tags`}\r\n        />\r\n        <Grid item xs={12} lg={6}>\r\n        <Grid\r\n          container\r\n          direction=\"row\"\r\n          justify=\"center\"\r\n          alignItems=\"flex-start\"\r\n        >\r\n          <Card className={classes.card} >\r\n            <Typography gutterBottom paragraph variant=\"body2\" component=\"p\">\r\n            <CardHeader\r\n              subheaderTypographyProps={{variant:'subtitle2'}}\r\n              subheader = {`Tags`}\r\n              className={classes.card_header}\r\n            />\r\n              <Grid\r\n                container\r\n                direction=\"row\"\r\n                justify=\"flex-start\"\r\n                alignItems=\"flex-start\"\r\n                className={classes.grid}\r\n              >\r\n                {group.map(tag => (\r\n                    <Link \r\n                      to={`/tags/${kebabCase(tag.fieldValue)}/`}\r\n                      className={classes.tags}\r\n                    >\r\n                    <sapn className={classes.tag_num}> {tag.totalCount}</sapn> \r\n                    {tag.fieldValue}\r\n                    </Link>\r\n                ))}\r\n              </Grid>\r\n              </Typography>\r\n          </Card>\r\n          </Grid>\r\n        </Grid>\r\n    </Layout>\r\n    )\r\n  }\r\n\r\n\r\nTagsPage.propTypes = {\r\n  data: PropTypes.shape({\r\n    allMarkdownRemark: PropTypes.shape({\r\n      group: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n          fieldValue: PropTypes.string.isRequired,\r\n          totalCount: PropTypes.number.isRequired,\r\n        }).isRequired\r\n      ),\r\n    }),\r\n    site: PropTypes.shape({\r\n      siteMetadata: PropTypes.shape({\r\n        title: PropTypes.string.isRequired,\r\n      }),\r\n    }),\r\n  }),\r\n}\r\n\r\nexport const pageQuery = graphql`\r\n  query {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n      }\r\n    }\r\n    allMarkdownRemark(limit: 2000, filter: {frontmatter: {publish: {eq: true}}}) {\r\n      group(field: frontmatter___tags) {\r\n        fieldValue\r\n        totalCount\r\n      }\r\n    }\r\n  }\r\n`"],"sourceRoot":""}