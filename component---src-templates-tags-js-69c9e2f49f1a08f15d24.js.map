{"version":3,"sources":["webpack:///./src/templates/tags.js"],"names":["Tags","pageContext","data","tag","allMarkdownRemark","edges","totalCount","tagHeader","map","node","url_path","frontmatter","title","key","to","pageQuery"],"mappings":"4FAAA,mGA4DeA,UArDF,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,KACnBC,EAAQF,EAARE,IAD8B,EAERD,EAAKE,kBAA3BC,EAF8B,EAE9BA,MAAOC,EAFuB,EAEvBA,WACTC,EAAeD,EAAN,SACE,IAAfA,EAAmB,GAAK,KADX,iBAEEH,EAFF,IAIf,OACI,YAAC,IAAD,KACF,uBACE,sBAAKI,GACL,sBACGF,EAAMG,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACJC,EAAaD,EAAKE,YAAlBD,SACAE,EAAUH,EAAKE,YAAfC,MACR,OACE,kBAAIC,IAAKH,GACP,YAAC,IAAD,CAAMI,GAAIJ,GAAWE,QAS7B,YAAC,IAAD,CAAME,GAAG,SAAT,eA6BC,IAAMC,EAAS","file":"component---src-templates-tags-js-69c9e2f49f1a08f15d24.js","sourcesContent":["import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport Layout from \"../components/layout\"\r\n\r\n// Components\r\nimport { Link, graphql } from \"gatsby\"\r\n\r\nconst Tags = ({ pageContext, data }) => {\r\n  const { tag } = pageContext\r\n  const { edges, totalCount } = data.allMarkdownRemark\r\n  const tagHeader = `${totalCount} post${\r\n    totalCount === 1 ? \"\" : \"s\"\r\n  } tagged with \"${tag}\"`\r\n\r\n  return (\r\n      <Layout>\r\n    <div>\r\n      <h1>{tagHeader}</h1>\r\n      <ul>\r\n        {edges.map(({ node }) => {\r\n          const { url_path } = node.frontmatter\r\n          const { title } = node.frontmatter\r\n          return (\r\n            <li key={url_path}>\r\n              <Link to={url_path}>{title}</Link>\r\n            </li>\r\n          )\r\n        })}\r\n      </ul>\r\n      {/*\r\n              This links to a page that does not yet exist.\r\n              You'll come back to it!\r\n            */}\r\n      <Link to=\"/tags\">All tags</Link>\r\n    </div>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nTags.propTypes = {\r\n  pageContext: PropTypes.shape({\r\n    tag: PropTypes.string.isRequired,\r\n  }),\r\n  data: PropTypes.shape({\r\n    allMarkdownRemark: PropTypes.shape({\r\n      totalCount: PropTypes.number.isRequired,\r\n      edges: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n          node: PropTypes.shape({\r\n            frontmatter: PropTypes.shape({\r\n              title: PropTypes.string.isRequired,\r\n              url_path: PropTypes.string.isRequired,\r\n            }),\r\n          }),\r\n        }).isRequired\r\n      ),\r\n    }),\r\n  }),\r\n}\r\n\r\nexport default Tags\r\n\r\nexport const pageQuery = graphql`\r\n  query($tag: String) {\r\n    allMarkdownRemark(\r\n      limit: 2000\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n      filter: { frontmatter: { tags: { in: [$tag] }, publish: {eq: true} } }\r\n    ) {\r\n      totalCount\r\n      edges {\r\n        node {\r\n          frontmatter {\r\n            title\r\n            url_path\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`"],"sourceRoot":""}